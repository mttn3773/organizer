{"version":3,"sources":["config/config.ts","store/reducers.ts","store/globalStore.tsx","hooks/useHttp.ts","components/Navigation.tsx","components/notify/Loading.tsx","components/notify/Notify.tsx","utils/toErrorsMap.ts","components/form/InputField.tsx","utils/toCapitalize.ts","components/form/UserForm.tsx","pages/Login.tsx","components/calendar/Day.tsx","components/calendar/Calendar.tsx","components/form/TaskForm.tsx","components/notify/AlertDialog.tsx","components/calendar/TaskCard.tsx","components/calendar/DayDetails.tsx","components/calendar/Selector.tsx","pages/Profile.tsx","pages/register.tsx","pages/routes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["config","endpoints","register","login","logout","me","tasks","findById","id","reducers","state","action","type","errors","payload","loading","auth","initialState","GlobalState","createContext","dispatch","DataProvider","children","useReducer","request","useHttp","useEffect","url","then","res","user","Provider","value","useContext","toast","useToast","a","method","body","headers","toastErorrs","JSON","stringify","fetch","response","json","success","status","msg","title","description","duration","isClosable","Navigation","links","justifyContent","alignItems","onClick","window","location","reload","fontSize","color","gridGap","href","w","h","bgColor","mb","position","px","letterSpacing","fontWeight","Loading","isOpen","onClose","background","display","textAlign","justifyItems","padding","isIndeterminate","margin","size","Notify","length","map","error","toErrorMap","mappedErrors","param","InputField","word","isTextArea","withLabel","props","useField","field","name","toUpperCase","slice","className","borderColor","_hover","UserForm","initialValues","email","password","onSubmit","values","setErrors","accessToken","to","isSubmitting","m","direction","width","border","p","borderRadius","disabled","LoginPage","Day","day","isActive","isThisMonth","isSelected","setSelected","sm","base","overflow","cursor","top","right","format","DAYS_OF_WEEK","Calendar","date","selected","startDay","clone","startOf","endDay","endOf","days","indexDay","isBefore","push","add","checkIsActive","moment","isSame","checkIsSelected","checkIsThisMonth","checkIsThisDay","filter","task","gridArea","templateColumns","md","rowGap","columnGap","lg","mt","index","as","toString","TaskForm","setTasks","isUpdating","taskId","hadnleClose","formatedInitialDate","handleSubmit","minutes","parseInt","split","hours","dateString","set","toISOString","prev","_id","pt","pb","zIndex","colorScheme","CustomAlertDialog","setIsOpen","handleDelete","cancelRef","useRef","leastDestructiveRef","ref","ml","TaskCard","setFormOpen","openDialog","setTaskToUpdate","left","fontStyle","DayDetails","useState","alertDialogOpen","setAlertDialogOpen","taskToDelete","setTaskToDelete","taskToUpdate","formOpen","borderLeft","height","overflowY","sort","task_first","task_second","undefined","Selector","setDate","numberOfTasks","changeMonth","dir","ProfilePage","gridAutoColumns","gridTemplateRows","templateAreas","month","RegisterPage","Routes","component","path","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c829f2a6.chunk.js","sourcesContent":["const ENDPOINTS = {\r\n  register: \"/api/user\",\r\n  login: \"/api/user/login\",\r\n  logout: \"/api/user/logout\",\r\n  me: \"/api/user/me\",\r\n  tasks: \"api/task\",\r\n  findById: (id: string) => `api/task/${id}`,\r\n};\r\n\r\nexport const config = {\r\n  server: {\r\n    endpoints: ENDPOINTS,\r\n  },\r\n};\r\n","import { IRootState } from \"./../interfaces/rootState.interface\";\r\nimport { IActionState } from \"./actions\";\r\n\r\nexport const reducers = (\r\n  state: IRootState,\r\n  action: IActionState\r\n): IRootState => {\r\n  switch (action.type) {\r\n    case \"SET_ERRORS\":\r\n      return { ...state, errors: action.payload };\r\n    case \"CLEAR_ERRORS\":\r\n      return { ...state, errors: [] };\r\n    case \"SET_LOADING\":\r\n      return { ...state, loading: action.payload };\r\n    case \"SET_AUTH\":\r\n      return { ...state, auth: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { createContext, useEffect, useReducer } from \"react\";\r\nimport { config } from \"../config/config\";\r\nimport { useHttp } from \"../hooks/useHttp\";\r\nimport { IRootState } from \"../interfaces/rootState.interface\";\r\nimport { IActionState } from \"./actions\";\r\nimport { reducers } from \"./reducers\";\r\n\r\ninterface globalStoreProps {}\r\nconst initialState: IRootState = {\r\n  errors: [],\r\n  loading: false,\r\n};\r\nexport const GlobalState = createContext<{\r\n  state: IRootState;\r\n  dispatch: React.Dispatch<IActionState>;\r\n}>({ state: initialState, dispatch: () => {} });\r\n\r\nexport const DataProvider: React.FC<globalStoreProps> = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducers, initialState);\r\n  const { request } = useHttp();\r\n  useEffect(() => {\r\n    if (!(typeof state.auth === \"undefined\") || !state) return;\r\n    request({ url: config.server.endpoints.me }).then((res) => {\r\n      dispatch({ type: \"SET_AUTH\", payload: !!res.user });\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <GlobalState.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </GlobalState.Provider>\r\n  );\r\n};\r\n","import { useToast } from \"@chakra-ui/react\";\r\nimport { useContext } from \"react\";\r\nimport { GlobalState } from \"./../store/globalStore\";\r\ninterface IRequestProps {\r\n  url: string;\r\n  method?: string;\r\n  body?: any;\r\n  headers?: any;\r\n  toastErorrs?: boolean;\r\n}\r\n\r\nexport const useHttp = () => {\r\n  const { dispatch } = useContext(GlobalState);\r\n  const toast = useToast();\r\n  const request = async ({\r\n    url,\r\n    method = \"GET\",\r\n    body,\r\n    headers = {},\r\n    toastErorrs = true,\r\n  }: IRequestProps) => {\r\n    try {\r\n      headers[\"Accept\"] = \"application/json, text/plain, */*\";\r\n      headers[\"Content-Type\"] = \"application/json\";\r\n      body = JSON.stringify(body);\r\n      dispatch({ type: \"SET_LOADING\", payload: true });\r\n      const response: any = await fetch(url, { method, body, headers });\r\n      const res = await response.json();\r\n      if (!res.success) {\r\n        if (response.status === 401) {\r\n          dispatch({ type: \"SET_AUTH\", payload: false });\r\n        }\r\n        if (toastErorrs)\r\n          dispatch({\r\n            type: \"SET_ERRORS\",\r\n            payload: res.errors || [{ msg: \"Something went wrong\" }],\r\n          });\r\n      }\r\n      if (res.success && res.msg) {\r\n        toast({\r\n          title: \"Success\",\r\n          description: res.msg,\r\n          status: \"success\",\r\n          duration: 3000,\r\n          isClosable: true,\r\n        });\r\n      }\r\n      dispatch({ type: \"SET_LOADING\", payload: false });\r\n      return res;\r\n    } catch (error) {\r\n      dispatch({ type: \"SET_LOADING\", payload: false });\r\n      if (toastErorrs) dispatch({ type: \"SET_ERRORS\", payload: [error] });\r\n      return;\r\n    }\r\n  };\r\n\r\n  return { request };\r\n};\r\n","import { Flex, Text, Link } from \"@chakra-ui/react\";\r\nimport React, { useContext } from \"react\";\r\nimport { config } from \"../config/config\";\r\nimport { useHttp } from \"../hooks/useHttp\";\r\nimport { GlobalState } from \"../store/globalStore\";\r\n\r\ninterface NavigationProps {}\r\n\r\nexport const Navigation: React.FC<NavigationProps> = ({}) => {\r\n  const { state } = useContext(GlobalState);\r\n  const { request } = useHttp();\r\n  const handleLogout = () => {\r\n    request({ url: config.server.endpoints.logout, method: \"POST\" }).then(\r\n      () => {\r\n        window.location.reload();\r\n      }\r\n    );\r\n  };\r\n  let links = null;\r\n  if (state.auth) {\r\n    links = (\r\n      <Flex justifyContent=\"center\" alignItems=\"center\">\r\n        <Link onClick={handleLogout} fontSize=\"xl\" color=\"whiteAlpha.800\">\r\n          LOG OUT\r\n        </Link>\r\n      </Flex>\r\n    );\r\n  } else {\r\n    links = (\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" gridGap=\"3rem\">\r\n        <Link href=\"/login\" fontSize=\"xl\" color=\"whiteAlpha.800\">\r\n          SIGN IN\r\n        </Link>\r\n        <Link href=\"/register\" fontSize=\"xl\" color=\"whiteAlpha.800\">\r\n          REGISTER\r\n        </Link>\r\n      </Flex>\r\n    );\r\n  }\r\n  return (\r\n    <Flex\r\n      w=\"100%\"\r\n      h=\"60px\"\r\n      bgColor=\"blackAlpha.800\"\r\n      mb=\"1rem\"\r\n      position=\"sticky\"\r\n      justifyContent=\"space-between\"\r\n      px=\"5rem\"\r\n    >\r\n      <Flex justifyContent=\"center\" alignItems=\"center\">\r\n        <Text\r\n          letterSpacing=\"wider\"\r\n          fontWeight=\"600\"\r\n          fontSize=\"2xl\"\r\n          color=\"whiteAlpha.800\"\r\n        >\r\n          ORG\r\n        </Text>\r\n      </Flex>\r\n      {links}\r\n    </Flex>\r\n  );\r\n};\r\n","import {\r\n  CircularProgress,\r\n  Modal,\r\n  ModalBody,\r\n  ModalContent,\r\n  ModalOverlay,\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\n\r\ninterface LoadingProps {}\r\n\r\nexport const Loading: React.FC<LoadingProps> = () => {\r\n  return (\r\n    <Modal isOpen={true} onClose={() => {}}>\r\n      <ModalOverlay />\r\n      <ModalContent background=\"rgba(0, 0, 0, 0.5)\">\r\n        <ModalBody\r\n          display=\"flex\"\r\n          textAlign=\"center\"\r\n          justifyItems=\"center\"\r\n          padding=\"5rem 5rem\"\r\n        >\r\n          <CircularProgress\r\n            isIndeterminate\r\n            margin=\"auto\"\r\n            size=\"60px\"\r\n            color=\"green.300\"\r\n          />\r\n        </ModalBody>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n","import { useToast } from \"@chakra-ui/react\";\r\nimport React, { useCallback, useContext, useEffect } from \"react\";\r\nimport { GlobalState } from \"../../store/globalStore\";\r\nimport { Loading } from \"./Loading\";\r\n\r\ninterface NotifyProps {}\r\n\r\nexport const Notify: React.FC<NotifyProps> = () => {\r\n  const { state, dispatch } = useContext(GlobalState);\r\n  const { errors, loading } = state;\r\n  const toast = useToast();\r\n  useEffect(() => {\r\n    if (!errors || !errors.length) return;\r\n    if (errors.length)\r\n      errors.map((error) => {\r\n        return toast({\r\n          title: \"Error\",\r\n          description: error.msg || \"Something went wrong\",\r\n          status: \"error\",\r\n          duration: 3000,\r\n          isClosable: true,\r\n        });\r\n      });\r\n    else {\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Something went wrong\",\r\n        status: \"error\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n    dispatch({ type: \"CLEAR_ERRORS\" });\r\n  }, [errors]);\r\n  return <>{loading && <Loading />}</>;\r\n};\r\n","import { IError } from \"../interfaces/errors.interface\";\r\n\r\nexport const toErrorMap = (errors: IError[]): Record<string, string> => {\r\n  const mappedErrors: Record<string, string> = {};\r\n\r\n  errors.map((error) => {\r\n    if (error.param) mappedErrors[error.param] = error.msg;\r\n    return;\r\n  });\r\n\r\n  return mappedErrors;\r\n};\r\n","import React, { InputHTMLAttributes } from \"react\";\r\nimport { ErrorMessage, useField } from \"formik\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  Textarea,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { toCapitalize } from \"../../utils/toCapitalize\";\r\ntype InputFieldProps = InputHTMLAttributes<\r\n  HTMLInputElement | HTMLTextAreaElement\r\n> & {\r\n  type: string;\r\n  isTextArea?: boolean;\r\n  withLabel?: boolean;\r\n};\r\n\r\nexport const InputField: React.FC<InputFieldProps> = ({\r\n  type,\r\n  isTextArea = false,\r\n  withLabel = true,\r\n  ...props\r\n}) => {\r\n  const [field] = useField(props as any);\r\n  return (\r\n    <FormControl id={field.name}>\r\n      {withLabel && <FormLabel>{toCapitalize(field.name)}</FormLabel>}\r\n      <ErrorMessage name={field.name} className=\"error-text\">\r\n        {(msg) => (\r\n          <Text textAlign=\"center\" fontWeight=\"600\" color=\"red.500\">\r\n            {msg}\r\n          </Text>\r\n        )}\r\n      </ErrorMessage>\r\n      {!isTextArea ? (\r\n        <Input\r\n          bgColor=\"whiteAlpha.500\"\r\n          borderColor=\"blue.300\"\r\n          _hover={{ borderColor: \"blue.500\" }}\r\n          {...field}\r\n          type={type}\r\n        />\r\n      ) : (\r\n        <Textarea\r\n          bgColor=\"whiteAlpha.500\"\r\n          borderColor=\"blue.300\"\r\n          _hover={{ borderColor: \"blue.500\" }}\r\n          {...field}\r\n          type={type}\r\n        />\r\n      )}\r\n    </FormControl>\r\n  );\r\n};\r\n","export const toCapitalize = (word: string) => {\r\n  return word[0].toUpperCase() + word.slice(1);\r\n};\r\n","import { Button, CircularProgress, Flex } from \"@chakra-ui/react\";\r\nimport { Form, Formik } from \"formik\";\r\nimport React, { useContext } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useHttp } from \"../../hooks/useHttp\";\r\nimport { GlobalState } from \"../../store/globalStore\";\r\nimport { toErrorMap } from \"../../utils/toErrorsMap\";\r\nimport { InputField } from \"./InputField\";\r\ninterface UserFormProps {\r\n  url: string;\r\n}\r\n\r\nexport const UserForm: React.FC<UserFormProps> = ({ url }) => {\r\n  const { request } = useHttp();\r\n  const { dispatch } = useContext(GlobalState);\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ email: \"\", password: \"\" }}\r\n      onSubmit={async (values, { setErrors }) => {\r\n        try {\r\n          const res = await request({\r\n            url,\r\n            method: \"POST\",\r\n            body: values,\r\n            toastErorrs: false,\r\n          });\r\n          if (res.accessToken) {\r\n            dispatch({ type: \"SET_AUTH\", payload: true });\r\n            return <Redirect to=\"/\" />;\r\n          }\r\n          const mappedErrors = toErrorMap(res.errors);\r\n          if (mappedErrors) return setErrors(mappedErrors);\r\n        } catch (errors) {\r\n          return setErrors(toErrorMap(errors));\r\n        }\r\n      }}\r\n    >\r\n      {({ isSubmitting, errors }) => (\r\n        <Form>\r\n          <Flex\r\n            m=\"0 auto\"\r\n            justifyItems=\"center\"\r\n            direction=\"column\"\r\n            gridGap=\"2rem\"\r\n            alignItems=\"center\"\r\n            width=\"75%\"\r\n            border=\"2px solid\"\r\n            p=\"4rem\"\r\n            borderRadius=\"6%\"\r\n            borderColor={\r\n              errors.email || errors.password ? \"red.400\" : \"green.400\"\r\n            }\r\n          >\r\n            <InputField type=\"email\" name=\"email\" />\r\n            <InputField type=\"password\" name=\"password\" />\r\n            <Button type=\"submit\" disabled={isSubmitting}>\r\n              {isSubmitting ? (\r\n                <CircularProgress\r\n                  size=\"2rem\"\r\n                  color=\"green.500\"\r\n                  isIndeterminate\r\n                />\r\n              ) : (\r\n                \"Submit\"\r\n              )}\r\n            </Button>\r\n          </Flex>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n","import { Box, Heading } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { UserForm } from \"../components/form/UserForm\";\r\nimport { config } from \"../config/config\";\r\ninterface LoginProps {}\r\n\r\nexport const LoginPage: React.FC<LoginProps> = () => {\r\n  return (\r\n    <Box margin=\"0 auto\" w=\"60%\">\r\n      <Heading mb=\"3rem\" fontWeight=\"600\" fontSize=\"2xl\" textAlign=\"center\">\r\n        SIGN IN\r\n      </Heading>\r\n      <UserForm url={config.server.endpoints.login} />\r\n    </Box>\r\n  );\r\n};\r\n","import { Flex, Text } from \"@chakra-ui/react\";\r\nimport moment from \"moment\";\r\nimport React from \"react\";\r\nimport { ITask } from \"../../interfaces/tasks.interface\";\r\n\r\ninterface DayProps {\r\n  day: moment.Moment;\r\n  isActive: boolean;\r\n  isThisMonth: boolean;\r\n  isSelected: boolean;\r\n  setSelected: React.Dispatch<React.SetStateAction<moment.Moment>>;\r\n  tasks: ITask[];\r\n}\r\n\r\nexport const Day: React.FC<DayProps> = ({\r\n  day,\r\n  isActive,\r\n  isThisMonth,\r\n  isSelected,\r\n  setSelected,\r\n  tasks,\r\n}) => {\r\n  return (\r\n    <Flex\r\n      onClick={isThisMonth ? () => setSelected(day) : () => {}}\r\n      h={{ sm: \"4rem\", base: \"3rem\" }}\r\n      w={{ sm: \"75%\", base: \"100%\" }}\r\n      alignItems=\"center\"\r\n      justifyContent=\"space-around\"\r\n      bgColor={isThisMonth ? \"blue.200\" : \"gray.300\"}\r\n      border={isSelected && isThisMonth ? \"2px\" : \"none\"}\r\n      borderColor=\"green.500\"\r\n      borderRadius=\"12px\"\r\n      overflow=\"hidden\"\r\n      position=\"relative\"\r\n      direction=\"column\"\r\n      cursor={isThisMonth ? \"pointer\" : \"auto\"}\r\n    >\r\n      {!!tasks.length && (\r\n        <Flex\r\n          position=\"absolute\"\r\n          borderRadius=\"50%\"\r\n          top=\"4px\"\r\n          right=\"4px\"\r\n          bgColor=\"yellow.200\"\r\n          w=\"1rem\"\r\n          h=\"1rem\"\r\n          justifyContent=\"center\"\r\n          fontWeight=\"600\"\r\n          alignItems=\"center\"\r\n        >\r\n          {tasks.length}\r\n        </Flex>\r\n      )}\r\n      <Text\r\n        color=\"blackAlpha.800\"\r\n        fontWeight={isActive ? 800 : 500}\r\n        w=\"100%\"\r\n        h=\"50%\"\r\n        textAlign=\"center\"\r\n      >\r\n        {day.format(\"DD\")}\r\n      </Text>\r\n    </Flex>\r\n  );\r\n};\r\n","import { Flex, Grid, Text } from \"@chakra-ui/react\";\r\nimport moment from \"moment\";\r\nimport React from \"react\";\r\nimport { ITask } from \"../../interfaces/tasks.interface\";\r\nimport { Day } from \"./Day\";\r\n\r\nconst DAYS_OF_WEEK = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\r\n\r\ninterface CalendarProps {\r\n  date: moment.Moment;\r\n  selected: moment.Moment;\r\n  setSelected: React.Dispatch<React.SetStateAction<moment.Moment>>;\r\n  tasks: ITask[];\r\n}\r\n\r\nexport const Calendar: React.FC<CalendarProps> = ({\r\n  date,\r\n  tasks,\r\n  setSelected,\r\n  selected,\r\n}) => {\r\n  const startDay = date.clone().startOf(\"month\").startOf(\"week\");\r\n  const endDay = date.clone().endOf(\"month\").endOf(\"week\");\r\n  const days: moment.Moment[] = [];\r\n  const indexDay = startDay.clone();\r\n  while (indexDay.isBefore(endDay)) {\r\n    days.push(indexDay.add(1, \"day\").clone());\r\n  }\r\n  const checkIsActive = (day: moment.Moment) => {\r\n    return moment().isSame(day, \"D\");\r\n  };\r\n  const checkIsSelected = (day: moment.Moment) => {\r\n    return selected.isSame(day, \"D\");\r\n  };\r\n  const checkIsThisMonth = (day: moment.Moment) => {\r\n    return date.isSame(day, \"M\");\r\n  };\r\n\r\n  const checkIsThisDay = (day: moment.Moment) => {\r\n    return tasks.filter((task) => moment(task.date).isSame(day, \"D\"));\r\n  };\r\n  return (\r\n    <Grid\r\n      gridArea=\"calendar\"\r\n      templateColumns=\"repeat(7, 1fr)\"\r\n      margin=\"auto\"\r\n      w={{ md: \"85%\", base: \"100%\" }}\r\n      rowGap=\"2rem\"\r\n      columnGap={{ lg: \"1.5rem\", base: \"0.7rem\" }}\r\n      mt=\"3rem\"\r\n      justifyItems=\"center\"\r\n      mb=\"2rem\"\r\n    >\r\n      {DAYS_OF_WEEK.map((day, index) => {\r\n        return (\r\n          <Flex\r\n            h={{ sm: \"4rem\", base: \"3rem\" }}\r\n            w={{ sm: \"75%\", base: \"100%\" }}\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-around\"\r\n            key={index}\r\n            bgColor=\"blue.200\"\r\n            borderColor=\"green.500\"\r\n            borderRadius=\"12px\"\r\n            overflow=\"hidden\"\r\n            direction=\"column\"\r\n          >\r\n            <Text\r\n              color=\"blackAlpha.800\"\r\n              as=\"b\"\r\n              w=\"100%\"\r\n              h=\"50%\"\r\n              textAlign=\"center\"\r\n            >\r\n              {day}\r\n            </Text>\r\n          </Flex>\r\n        );\r\n      })}\r\n      {days.map((day) => {\r\n        return (\r\n          <Day\r\n            tasks={checkIsThisDay(day)}\r\n            isSelected={checkIsSelected(day)}\r\n            setSelected={setSelected}\r\n            day={day}\r\n            key={day.clone().toString()}\r\n            isActive={checkIsActive(day)}\r\n            isThisMonth={checkIsThisMonth(day)}\r\n          />\r\n        );\r\n      })}\r\n    </Grid>\r\n  );\r\n};\r\n","import { Button, CircularProgress, Flex } from \"@chakra-ui/react\";\r\nimport { Form, Formik, FormikHelpers } from \"formik\";\r\nimport moment from \"moment\";\r\nimport React, { useContext } from \"react\";\r\nimport { AiOutlineClose } from \"react-icons/ai\";\r\nimport { config } from \"../../config/config\";\r\nimport { useHttp } from \"../../hooks/useHttp\";\r\nimport { ICreateTask, ITask } from \"../../interfaces/tasks.interface\";\r\nimport { GlobalState } from \"../../store/globalStore\";\r\nimport { toErrorMap } from \"../../utils/toErrorsMap\";\r\nimport { InputField } from \"./InputField\";\r\ninterface CreateTaskFormProps {\r\n  date: moment.Moment;\r\n  setTasks: React.Dispatch<React.SetStateAction<ITask[]>>;\r\n  hadnleClose: () => void;\r\n  initialValues?: ICreateTask;\r\n  isUpdating?: boolean;\r\n  taskId?: string;\r\n  bgColor?: string;\r\n}\r\n\r\nexport const TaskForm: React.FC<CreateTaskFormProps> = ({\r\n  date,\r\n  setTasks,\r\n  initialValues = { title: \"\", description: \"\", date: \"\" },\r\n  isUpdating = false,\r\n  taskId,\r\n  hadnleClose,\r\n  bgColor = \"blue.100\",\r\n}) => {\r\n  const { state } = useContext(GlobalState);\r\n  const { request } = useHttp();\r\n  const formatedInitialDate = initialValues.date\r\n    ? moment(initialValues.date).format(\"HH:mm\")\r\n    : \"\";\r\n  const handleSubmit = async (\r\n    values: ICreateTask,\r\n    { setErrors }: FormikHelpers<ICreateTask>\r\n  ) => {\r\n    try {\r\n      if (!values.date) {\r\n        return setErrors({ date: \"Invalid date\" });\r\n      }\r\n      const minutes = parseInt(values.date.split(\":\")[1]);\r\n      const hours = parseInt(values.date.split(\":\")[0]);\r\n      const dateString = date\r\n        .clone()\r\n        .set(\"minutes\", minutes)\r\n        .set(\"hours\", hours)\r\n        .set(\"seconds\", 0)\r\n        .toISOString();\r\n      const res = await request({\r\n        url:\r\n          isUpdating && taskId\r\n            ? config.server.endpoints.findById(taskId)\r\n            : config.server.endpoints.tasks,\r\n        method: isUpdating ? \"PUT\" : \"POST\",\r\n        body: { ...values, date: dateString },\r\n        toastErorrs: true,\r\n      });\r\n      if (res.success && res.task) {\r\n        if (isUpdating)\r\n          setTasks((prev) => prev.filter((task) => task._id !== taskId));\r\n        hadnleClose();\r\n        setTasks((prev) => [...prev, res.task]);\r\n        return;\r\n      }\r\n      const mappedErrors = toErrorMap(res.errors);\r\n      if (mappedErrors) setErrors(mappedErrors);\r\n    } catch (errors) {\r\n      return setErrors(toErrorMap(errors));\r\n    }\r\n  };\r\n  return (\r\n    <Flex bgColor={bgColor} w=\"100%\" justifyContent=\"center\">\r\n      <Formik\r\n        initialValues={{ ...initialValues, date: formatedInitialDate }}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        {({ isSubmitting }) => (\r\n          <Form>\r\n            <Flex\r\n              pt=\"1rem\"\r\n              pb=\"1rem\"\r\n              m=\"0 auto\"\r\n              justifyItems=\"center\"\r\n              direction=\"column\"\r\n              alignItems=\"center\"\r\n              width=\"100%\"\r\n              position=\"relative\"\r\n            >\r\n              <Flex\r\n                position=\"absolute\"\r\n                top=\"4px\"\r\n                right=\"2px\"\r\n                cursor=\"pointer\"\r\n                color=\"red.500\"\r\n                zIndex=\"999\"\r\n                onClick={hadnleClose}\r\n              >\r\n                <AiOutlineClose size=\"1.4rem\" />\r\n              </Flex>\r\n              <InputField type=\"text\" name=\"title\" />\r\n              <InputField isTextArea={true} type=\"text\" name=\"description\" />\r\n              <InputField type=\"time\" name=\"date\" />\r\n              <Button\r\n                colorScheme=\"blue\"\r\n                mt=\"1rem\"\r\n                type=\"submit\"\r\n                disabled={isSubmitting || state.loading}\r\n              >\r\n                {isSubmitting ? (\r\n                  <CircularProgress\r\n                    size=\"2rem\"\r\n                    color=\"green.500\"\r\n                    isIndeterminate\r\n                  />\r\n                ) : (\r\n                  \"Submit\"\r\n                )}\r\n              </Button>\r\n            </Flex>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Flex>\r\n  );\r\n};\r\n","import {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogContent,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogOverlay,\r\n  Button,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useContext, useRef } from \"react\";\r\nimport { GlobalState } from \"../../store/globalStore\";\r\n\r\ninterface AlertDialogProps {\r\n  isOpen: boolean;\r\n  setIsOpen: React.Dispatch<React.SetStateAction<boolean>>;\r\n  handleDelete: () => Promise<any>;\r\n}\r\n\r\nexport const CustomAlertDialog: React.FC<AlertDialogProps> = ({\r\n  isOpen,\r\n  setIsOpen,\r\n  handleDelete,\r\n}) => {\r\n  const { state } = useContext(GlobalState);\r\n  const onClose = () => setIsOpen(false);\r\n  const cancelRef = useRef(null);\r\n  return (\r\n    <AlertDialog\r\n      isOpen={isOpen}\r\n      leastDestructiveRef={cancelRef}\r\n      onClose={onClose}\r\n    >\r\n      <AlertDialogOverlay>\r\n        <AlertDialogContent>\r\n          <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n            Delete Task\r\n          </AlertDialogHeader>\r\n\r\n          <AlertDialogBody>\r\n            Are you sure? You can't undo this action afterwards.\r\n          </AlertDialogBody>\r\n\r\n          <AlertDialogFooter>\r\n            <Button ref={cancelRef} onClick={onClose}>\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              disabled={state.loading}\r\n              colorScheme=\"red\"\r\n              onClick={() => handleDelete().then(() => onClose())}\r\n              ml={3}\r\n            >\r\n              Delete\r\n            </Button>\r\n          </AlertDialogFooter>\r\n        </AlertDialogContent>\r\n      </AlertDialogOverlay>\r\n    </AlertDialog>\r\n  );\r\n};\r\n","import { Flex, Heading, Text } from \"@chakra-ui/react\";\r\nimport moment from \"moment\";\r\nimport React from \"react\";\r\nimport { AiFillDelete } from \"react-icons/ai\";\r\nimport { FaPencilAlt } from \"react-icons/fa\";\r\nimport { ITask } from \"../../interfaces/tasks.interface\";\r\n\r\ninterface TaskCardProps {\r\n  task: ITask;\r\n  index: number;\r\n  setFormOpen: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setTaskToUpdate: React.Dispatch<React.SetStateAction<string | undefined>>;\r\n  openDialog: (id: string) => void;\r\n}\r\n\r\nexport const TaskCard: React.FC<TaskCardProps> = ({\r\n  task,\r\n  index,\r\n  setFormOpen,\r\n  openDialog,\r\n  setTaskToUpdate,\r\n}) => {\r\n  return (\r\n    <Flex\r\n      key={task._id}\r\n      direction=\"column\"\r\n      textAlign=\"center\"\r\n      position=\"relative\"\r\n      gridGap=\"1rem\"\r\n      w=\"100%\"\r\n      pt=\"2rem\"\r\n      pb=\"2rem\"\r\n      bgColor={index % 2 === 0 ? \"gray.200\" : \"gray.100\"}\r\n    >\r\n      <Flex\r\n        position=\"absolute\"\r\n        justifyItems=\"center\"\r\n        alignItems=\"center\"\r\n        left=\"20px\"\r\n        top=\"15px\"\r\n        cursor=\"pointer\"\r\n        gridGap=\"1rem\"\r\n      >\r\n        <AiFillDelete\r\n          size=\"1.4rem\"\r\n          color=\"#ec5c5c\"\r\n          onClick={() => openDialog(task._id)}\r\n        />\r\n\r\n        <FaPencilAlt\r\n          size=\"1.1rem\"\r\n          onClick={() => {\r\n            setFormOpen(false);\r\n            setTaskToUpdate(task._id);\r\n          }}\r\n        />\r\n      </Flex>\r\n      <Heading size=\"md\">{task.title}</Heading>\r\n      <Text>{moment(task.date).format(\"HH:mm\")} </Text>\r\n      <Text fontStyle={!task.description ? \"italic\" : \"normal\"}>\r\n        {task.description || \"No description\"}\r\n      </Text>\r\n    </Flex>\r\n  );\r\n};\r\n","import { Box, Button, Flex, Text } from \"@chakra-ui/react\";\r\nimport moment from \"moment\";\r\nimport React, { useState } from \"react\";\r\nimport { config } from \"../../config/config\";\r\nimport { useHttp } from \"../../hooks/useHttp\";\r\nimport { ITask } from \"../../interfaces/tasks.interface\";\r\nimport { TaskForm } from \"../form/TaskForm\";\r\nimport { CustomAlertDialog } from \"../notify/AlertDialog\";\r\nimport { TaskCard } from \"./TaskCard\";\r\ninterface DayDetailsProps {\r\n  tasks: ITask[];\r\n  date: moment.Moment;\r\n  setTasks: React.Dispatch<React.SetStateAction<ITask[]>>;\r\n}\r\n\r\nexport const DayDetails: React.FC<DayDetailsProps> = ({\r\n  tasks,\r\n  date,\r\n  setTasks,\r\n}) => {\r\n  const { request } = useHttp();\r\n  const [alertDialogOpen, setAlertDialogOpen] = useState<boolean>(false);\r\n  const [taskToDelete, setTaskToDelete] = useState<string>();\r\n  const [taskToUpdate, setTaskToUpdate] = useState<string>();\r\n  const [formOpen, setFormOpen] = useState<boolean>(false);\r\n  const openDialog = (id: string) => {\r\n    setTaskToDelete(id);\r\n    setAlertDialogOpen(true);\r\n  };\r\n  const handleDelete = async () => {\r\n    if (!taskToDelete) return;\r\n    const res = await request({\r\n      url: config.server.endpoints.findById(taskToDelete),\r\n      method: \"DELETE\",\r\n    });\r\n    if (res.success && res.task) {\r\n      setTasks((prev) => prev.filter((task) => task._id !== res.task._id));\r\n    }\r\n  };\r\n  return (\r\n    <Box\r\n      pb=\"2rem\"\r\n      borderLeft=\"1px solid\"\r\n      borderColor=\"gray.200\"\r\n      bgColor=\"gray.100\"\r\n      gridArea=\"details\"\r\n      height={{ base: \"auto\", md: \"90vh\" }}\r\n      overflowY=\"scroll\"\r\n    >\r\n      <Flex direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\r\n        <CustomAlertDialog\r\n          isOpen={alertDialogOpen}\r\n          setIsOpen={setAlertDialogOpen}\r\n          handleDelete={handleDelete}\r\n        />\r\n        {tasks.length ? (\r\n          tasks\r\n            .sort((task_first, task_second) => {\r\n              return moment(task_first.date).isBefore(moment(task_second.date))\r\n                ? -1\r\n                : 1;\r\n            })\r\n            .map((task, index) => {\r\n              if (task._id === taskToUpdate)\r\n                return (\r\n                  <TaskForm\r\n                    key={task._id}\r\n                    bgColor={index % 2 === 0 ? \"gray.200\" : \"gray.100\"}\r\n                    hadnleClose={() => setTaskToUpdate(undefined)}\r\n                    setTasks={setTasks}\r\n                    date={date}\r\n                    isUpdating={true}\r\n                    taskId={task._id}\r\n                    initialValues={{\r\n                      date: task.date,\r\n                      title: task.title,\r\n                      description: task.description,\r\n                    }}\r\n                  />\r\n                );\r\n              else\r\n                return (\r\n                  <TaskCard\r\n                    key={task._id}\r\n                    index={index}\r\n                    openDialog={openDialog}\r\n                    setFormOpen={setFormOpen}\r\n                    setTaskToUpdate={setTaskToUpdate}\r\n                    task={task}\r\n                  />\r\n                );\r\n            })\r\n        ) : (\r\n          <Text fontStyle=\"italic\" textAlign=\"center\">\r\n            No tasks were found\r\n          </Text>\r\n        )}\r\n        {!formOpen && (\r\n          <Button\r\n            mt=\"3rem\"\r\n            colorScheme=\"blue\"\r\n            onClick={() => {\r\n              setTaskToUpdate(undefined);\r\n              setFormOpen(true);\r\n            }}\r\n          >\r\n            ADD NEW\r\n          </Button>\r\n        )}\r\n        {formOpen && (\r\n          <TaskForm\r\n            hadnleClose={() => setFormOpen(false)}\r\n            setTasks={setTasks}\r\n            date={date}\r\n          />\r\n        )}\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n","import { Button, Flex, Text } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { AiOutlineArrowLeft, AiOutlineArrowRight } from \"react-icons/ai\";\r\n\r\ninterface SelectorProps {\r\n  date: moment.Moment;\r\n  setDate: React.Dispatch<React.SetStateAction<moment.Moment>>;\r\n  numberOfTasks: number;\r\n}\r\n\r\nexport const Selector: React.FC<SelectorProps> = ({\r\n  date,\r\n  setDate,\r\n  numberOfTasks,\r\n}) => {\r\n  const changeMonth = (dir: number) => {\r\n    setDate((prev) => prev.clone().add(dir, \"month\"));\r\n  };\r\n  return (\r\n    <Flex\r\n      gridArea=\"selector\"\r\n      margin=\"auto\"\r\n      w=\"40%\"\r\n      justifyContent=\"space-around\"\r\n      alignItems=\"center\"\r\n    >\r\n      <Button onClick={() => changeMonth(-1)}>\r\n        <AiOutlineArrowLeft />\r\n      </Button>\r\n      <Flex\r\n        borderRadius=\"50%\"\r\n        bgColor=\"red.300\"\r\n        w=\"2rem\"\r\n        h=\"2rem\"\r\n        fontWeight=\"600\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        position={{ sm: \"relative\", base: \"absolute\" }}\r\n        right={{ sm: \"\", base: \"10px\" }}\r\n      >\r\n        {numberOfTasks}\r\n      </Flex>\r\n      <Text textAlign=\"center\">{date.format(\"MMM YYYY\")}</Text>\r\n      <Button onClick={() => changeMonth(1)}>\r\n        <AiOutlineArrowRight />\r\n      </Button>\r\n    </Flex>\r\n  );\r\n};\r\n","import { Grid } from \"@chakra-ui/react\";\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Calendar } from \"../components/calendar/Calendar\";\r\nimport { DayDetails } from \"../components/calendar/DayDetails\";\r\nimport { Selector } from \"../components/calendar/Selector\";\r\nimport { config } from \"../config/config\";\r\nimport { useHttp } from \"../hooks/useHttp\";\r\nimport { ITask } from \"../interfaces/tasks.interface\";\r\n\r\ninterface ProfileProps {}\r\n\r\nexport const ProfilePage: React.FC<ProfileProps> = () => {\r\n  const [date, setDate] = useState<moment.Moment>(moment());\r\n  const [selected, setSelected] = useState<moment.Moment>(moment());\r\n  const [tasks, setTasks] = useState<ITask[]>([]);\r\n  const { request } = useHttp();\r\n\r\n  useEffect(() => {\r\n    request({\r\n      url: config.server.endpoints.tasks,\r\n    }).then((res) => setTasks(res.tasks));\r\n  }, []);\r\n  return (\r\n    <Grid\r\n      gridAutoColumns=\"2fr 1fr 1fr\"\r\n      gridTemplateRows=\"auto\"\r\n      templateAreas={{\r\n        md: `\r\n        \"selector selector selector\" \r\n        \"calendar calendar details\"\r\n        `,\r\n\r\n        base: `\r\n          \"selector selector selector\"\r\n          \"calendar calendar calendar\"\r\n          \"details details details\"`,\r\n      }}\r\n    >\r\n      <Selector\r\n        numberOfTasks={\r\n          tasks.filter(\r\n            (task) => moment(task.date).month() === date.clone().month()\r\n          ).length\r\n        }\r\n        date={date}\r\n        setDate={setDate}\r\n      />\r\n\r\n      <Calendar\r\n        date={date}\r\n        setSelected={setSelected}\r\n        selected={selected}\r\n        tasks={tasks}\r\n      />\r\n\r\n      <DayDetails\r\n        setTasks={setTasks}\r\n        date={selected}\r\n        tasks={tasks.filter((task) => moment(task.date).isSame(selected, \"D\"))}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n","import { Box, Heading } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { UserForm } from \"../components/form/UserForm\";\r\nimport { config } from \"../config/config\";\r\ninterface registerProps {}\r\n\r\nexport const RegisterPage: React.FC<registerProps> = ({}) => {\r\n  return (\r\n    <Box margin=\"0 auto\" w=\"60%\">\r\n      <Heading mb=\"3rem\" fontWeight=\"600\" fontSize=\"2xl\" textAlign=\"center\">\r\n        SIGN UP\r\n      </Heading>\r\n      <UserForm url={config.server.endpoints.register} />\r\n    </Box>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport { GlobalState } from \"../store/globalStore\";\r\nimport { LoginPage } from \"./Login\";\r\nimport { ProfilePage } from \"./Profile\";\r\nimport { RegisterPage } from \"./register\";\r\ninterface routesProps {}\r\n\r\nexport const Routes: React.FC<routesProps> = ({}) => {\r\n  const { state } = useContext(GlobalState);\r\n  const { auth } = state;\r\n\r\n  const isUndefined = typeof auth === \"undefined\";\r\n  if (isUndefined) {\r\n    return null;\r\n  }\r\n  return (\r\n    <BrowserRouter>\r\n      {auth ? (\r\n        <Switch>\r\n          <Route component={ProfilePage} path=\"/profile\" />\r\n          <Redirect to=\"/profile\" />\r\n        </Switch>\r\n      ) : (\r\n        <Switch>\r\n          <Route component={RegisterPage} path=\"/register\" />\r\n          <Route component={LoginPage} path=\"/login\" />\r\n          <Redirect to=\"/login\" />\r\n        </Switch>\r\n      )}\r\n    </BrowserRouter>\r\n  );\r\n};\r\n","import { Box } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { Navigation } from \"./components/Navigation\";\nimport { Notify } from \"./components/notify/Notify\";\nimport { Routes } from \"./pages/routes\";\nimport { DataProvider } from \"./store/globalStore\";\nfunction App() {\n  return (\n    <Box className=\"App\">\n      <DataProvider>\n        <Navigation />\n        <Notify />\n        <Routes />\n      </DataProvider>\n    </Box>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ChakraProvider } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}